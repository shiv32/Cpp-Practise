Behavioral Design Pattern
    visitor design pattern
---------------------------------

### ðŸ“š **Library with different media**

Imagine a **library** that has:

* **Books** 
* **Magazines** 
* **DVDs** 

Each item is part of the library collection.

Now, there are different kinds of **operations (visitors)** that can be applied to these items:

* **Librarian** â†’ checks them in/out.
* **Cataloguer** â†’ records metadata for the item.
* **Repair staff** â†’ fixes damaged items.

---

### How it maps

* **Library items (Book, Magazine, DVD)** â†’ *Elements being visited*.
* **Visitors (Librarian, Cataloguer, Repair staff)** â†’ *Visitors performing different operations*.
* Each item has an `accept(visitor)` method â†’ it tells the visitor: *"You know what to do with me."*

This way:

* If the library introduces a **new operation** (say, *Digital Archivist*), you just add a new visitor class.
* You **donâ€™t modify** `Book`, `Magazine`, or `DVD`.

---

### Key point

Visitor is useful when:

* You have a **stable set of object types** (like Book, Magazine, DVD).
* You need to perform **new operations frequently** (checking out, cataloging, repairing, archivingâ€¦).

---

